import { MongodbService } from "src/mongodb/mongodb.service";
import { BOT_ENTRANCE_SCENE, BOT_REASON_SCENE } from "../sceneConstants/telegraf.constants";
import { Scene, Hears, SceneEnter } from "nestjs-telegraf";
import { MyContext, ReasonType } from "../interfaces/context.interface";
import { Markup } from "telegraf";




@Scene(BOT_REASON_SCENE)
export class BotReasonScene {

    constructor(private readonly mongoService: MongodbService) { }


    @SceneEnter()
    async onSceneEnter(context: MyContext): Promise<void> {
        const message = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º üéâ\n\n–¢—ã –ø–æ–ø–∞–ª –∫ –¢–û–ü–∞–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞\\.\n\n–ë—É–¥–µ–º —Ä–∞–¥—ã –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ\\.\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ‚¨áÔ∏è\n\nüë• –•–æ—á–µ—à—å –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É —Å –æ–≤–Ω–µ—Ä–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? –ñ–º–∏ \\- _*–•–æ—á—É –Ω–∞ –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É*_\n\nüåê–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ: –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö, –≤–µ—Ä—Ç–∏–∫–∞–ª—è—Ö –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö? –ñ–º–∏ \\- _*–•–æ—á—É –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç*_\n\nüì®–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\\. –î–ª—è —ç—Ç–æ–≥–æ –∂–º–∏ \\- _*–•–æ—á—É —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ–∑–∂–µ*_`; 

        await context.reply(message, { parse_mode: 'MarkdownV2', reply_markup: { 
            keyboard: [
                ["–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É"],
                ["–•–æ—á—É –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"],
                ["–•–æ—á—É —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ–∑–∂–µ"],
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
        });

        if(await this.mongoService.findSession(context.from.id) !== null) { 
            await this.mongoService.updateSession(context.from.id, context.message?.from?.username);
        } else {
            await this.mongoService.createSession(context.from.id, context.message?.from?.username);
        }
    }

    @Hears('–•–æ—á—É —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ–∑–∂–µ')
    async OnHearsContacts(context: MyContext) {

        await this.mongoService.updateReason(context.from.id, ReasonType.Contacts);
        await context.scene.enter(BOT_ENTRANCE_SCENE);
    }

    @Hears('–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É')
    async onHearsOwnerMeet(context: MyContext) {
        await this.mongoService.updateReason(context.from.id, ReasonType.Local);
        await context.scene.enter(BOT_ENTRANCE_SCENE);
    }

    @Hears('–•–æ—á—É –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
    async onHearsSite(context: MyContext) {
        await context.reply('–ù–∞—à —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\nhttps://lidera.agency');
    }

}